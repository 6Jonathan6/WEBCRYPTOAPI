// secretSalt could be generated by crypto.getRandomValues(new Uint8Array(16))
function createSalt(secretKey) {
    const encoder = new TextEncoder('utf-8')
    return encoder.encode(secretKey)
}

// "encrypt", "decrypt"
async function direveKey(phrase, secretSalt, usage) {
    const encoder = new TextEncoder('utf-8')
    const salt = secretSalt // A Uint8Array 
    const iterations = 100000 // The greater the safer and the slower
    const phraseBytes = encoder.encode(phrase)
    const baseKey = await crypto.subtle.importKey('raw', phraseBytes, { name: 'PBKDF2' }, false, ['deriveKey'])
    const algorithm = { name: "PBKDF2", salt: salt, iterations: iterations, hash: "SHA-256" }
    const derivedKeyAlgorithm = { name: 'AES-GCM', length: 256 }
    const extractable = false
    const direvedKeyUsages = [usage]
    const direvedKey = await crypto.subtle.deriveKey(algorithm, baseKey, derivedKeyAlgorithm, extractable, direvedKeyUsages)
    return direvedKey
}

async function encrypt(phrase, salt, plainText) {
    const key = await await direveKey(phrase, salt, 'encrypt')
    const encoder = new TextEncoder()
    const iv = crypto.getRandomValues(new Uint8Array(16))
    const plainTextBytes = encoder.encode(plainText)
    const algorithm = { name: 'AES-GCM', iv: iv };
    const encrypted = await crypto.subtle.encrypt(algorithm, key, plainTextBytes)
    return { iv: iv, encBuffer: encrypted }

}

async function decrypt(encryptedObject, phrase, salt) {
    const data = encryptedObject.encBuffer
    const key = await direveKey(phrase, salt, 'decrypt')
    const iv = encryptedObject.iv
    const algorithm = { name: 'AES-GCM', iv: iv }
    const decryptedBytes = await crypto.subtle.decrypt(algorithm, key, data)
    return new TextDecoder().decode(decryptedBytes)
}

const phrase = 'gestionix'
const secretKey = 'jonathan'
const salt = createSalt(secretKey)
const iv = crypto.getRandomValues(new Uint8Array(16))
const plainText = 'Lorem Ipsum is simply dummy text of the printing and typesetting industry.Lorem Ipsum has been the industry\'s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.'
const encryptedObject = await encrypt(phrase, salt, plainText)
const decrypted = await decrypt(encryptedObject, phrase, salt).catch(e => console.log({ e }))